"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram-–±–æ—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.
"""

import time
from threading import Thread
from typing import Dict, Optional

from telebot import TeleBot, types
from telebot.apihelper import ApiTelegramException
from requests.exceptions import RequestException

from crypto_bot import api
from crypto_bot import database as db
from crypto_bot import admin
from crypto_bot.config import (ADMIN_ID, DEFAULT_COINS, DEFAULT_THRESHOLD,
                               LOGGER_ID,
                               RETRY_PERIOD, TELEGRAM_TOKEN, setup_logger)

logger = setup_logger(__name__)

bot = TeleBot(TELEGRAM_TOKEN)

user_settings = {}

user_states = {}


def load_settings():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç—å."""
    global user_settings
    user_settings = db.load_all_user_settings()
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {len(user_settings)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")


def get_main_keyboard() -> types.ReplyKeyboardMarkup:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞.

    Returns:
        types.ReplyKeyboardMarkup: –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn_balance = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç")
    btn_threshold = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    btn_depozit = types.KeyboardButton("–£–∫–∞–∑–∞—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ –≤ –º–æ–Ω–µ—Ç—É")
    btn_info = types.KeyboardButton("–¢–µ–∫—É—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    keyboard.add(btn_balance, btn_threshold, btn_depozit, btn_info)
    return keyboard


def send_message(chat_id: int, message: str, reply_markup: Optional[
    types.ReplyKeyboardMarkup] = None) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, —É–¥–∞–ª—è–µ—Ç –µ–≥–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    Args:
        chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        reply_markup: –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    try:
        bot.send_message(chat_id, message, reply_markup=reply_markup,
                         parse_mode='HTML')
    except ApiTelegramException as error:
        if error.error_code == 403 and "bot was blocked by the user" in error.description:
            logger.warning(
                f"–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {chat_id}. –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î.")
            db.remove_user(chat_id)

            if chat_id in user_settings:
                del user_settings[chat_id]
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {error}")
    except RequestException as error:
        logger.error(
            f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {error}")
    except Exception as error:
        logger.error(
            f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {error}")
    else:
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")


def price_checker() -> None:
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
    """
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω")

    while True:
        try:
            coin_ids = set()
            for chat_id, settings in user_settings.items():
                if "coin_id" in settings:
                    coin_ids.add(settings["coin_id"])

            if not coin_ids:
                logger.debug("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω")
                time.sleep(RETRY_PERIOD)
                continue

            prices = api.get_multiple_prices(list(coin_ids))

            for chat_id, settings in list(user_settings.items()):
                coin_id = settings.get("coin_id")
                if not coin_id or coin_id not in prices or prices[
                    coin_id] is None:
                    continue

                current_price = prices[coin_id]
                balance = settings.get("balance")
                threshold = settings.get("threshold", DEFAULT_THRESHOLD)
                depozit = settings.get("depozit", 0)
                last_notified_price = settings.get("last_notified_price")

                if balance is None or last_notified_price is None:
                    user_settings[chat_id][
                        "last_notified_price"] = current_price
                    db.update_user_settings(chat_id,
                                            last_notified_price=current_price)
                    continue

                if abs(current_price - last_notified_price) >= threshold:
                    updated_balance = balance * current_price * 0.97
                    formatted_balance = f"{updated_balance:,.2f}".replace(",",
                                                                          " ")

                    coin_name = DEFAULT_COINS.get(coin_id, {}).get("name",
                                                                   coin_id.upper())
                    currency = DEFAULT_COINS.get(coin_id, {}).get("currency",
                                                                  "rub").upper()

                    message_parts = [
                        f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å {coin_name}</b>: {current_price:,.2f} {currency}",
                        f"<b>–ë–∞–ª–∞–Ω—Å</b>: {formatted_balance} {currency}"
                    ]

                    if depozit > 0:
                        profit = updated_balance - depozit
                        profit_percent = (profit / depozit) * 100

                        message_parts.append(
                            f"<b>–í–ª–æ–∂–µ–Ω–æ</b>: {depozit:,.2f} {currency}")
                        message_parts.append(
                            f"<b>–ü—Ä–∏–±—ã–ª—å</b>: {profit:,.2f} {currency} ({profit_percent:+.2f}%)"
                        )

                    message = "\n".join(message_parts)
                    send_message(chat_id, message)

                    if chat_id in user_settings:
                        user_settings[chat_id][
                            "last_notified_price"] = current_price
                        db.update_user_settings(chat_id,
                                                last_notified_price=current_price)

            for coin_id, price in prices.items():
                if price is not None:
                    db.update_coin_price(coin_id, price)

        except api.RateLimitError:
            logger.warning(
                "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API. –û–∂–∏–¥–∞–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π.")
            time.sleep(RETRY_PERIOD * 2)
            continue

        except Exception as error:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω: {error}")
            if LOGGER_ID:
                try:
                    send_message(int(LOGGER_ID),
                                 f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω: {error}")
                except Exception:
                    pass

        time.sleep(RETRY_PERIOD)

@bot.message_handler(commands=["start"])
def send_welcome(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.
    """
    chat_id = message.chat.id

    if chat_id not in user_settings:
        user_settings[chat_id] = {
            "coin_id": "fpi-bank",
            "balance": None,
            "threshold": DEFAULT_THRESHOLD,
            "depozit": 0,
            "last_notified_price": None
        }
        db.update_user_settings(chat_id)
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {chat_id}")

    welcome_text = (
        "üëã <b>–ü—Ä–∏–≤–µ—Ç!</b>\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.\n"
        "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —è –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –º–æ–Ω–µ—Ç—É <b>FPI Bank</b>, –Ω–æ –≤ –±—É–¥—É—â–µ–º —Å–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏ –¥—Ä—É–≥–∏–µ.\n\n"
        "<b>–î–ª—è —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω—É–∂–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
        "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
        "‚Ä¢ –ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.1)\n"
        "‚Ä¢ –í–ª–æ–∂–µ–Ω–∏–µ –≤ –º–æ–Ω–µ—Ç—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø—Ä–∏–±—ã–ª–∏)\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–≤–æ–¥–∞ –Ω—É–∂–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."
    )

    keyboard = get_main_keyboard()
    send_message(chat_id, welcome_text, reply_markup=keyboard)


@bot.message_handler(
    func=lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç")
def request_balance(message: types.Message) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç."""
    chat_id = message.chat.id
    send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç:")
    user_states[chat_id] = "awaiting_balance"


@bot.message_handler(
    func=lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
def request_threshold(message: types.Message) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    chat_id = message.chat.id
    send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.1):")
    user_states[chat_id] = "awaiting_threshold"


@bot.message_handler(
    func=lambda message: message.text == "–£–∫–∞–∑–∞—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ –≤ –º–æ–Ω–µ—Ç—É")
def request_depozit(message: types.Message) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É–º–º—É –≤–ª–æ–∂–µ–Ω–∏—è."""
    chat_id = message.chat.id
    send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–ª–æ–∂–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö:")
    user_states[chat_id] = "awaiting_depozit"


@bot.message_handler(func=lambda message: message.text == "–¢–µ–∫—É—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
def show_current_info(message: types.Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    chat_id = message.chat.id
    settings = user_settings.get(chat_id)

    if not settings:
        send_message(chat_id,
                     "–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.")
        return

    coin_id = settings.get("coin_id", "fpi-bank")
    balance = settings.get("balance")
    threshold = settings.get("threshold", DEFAULT_THRESHOLD)
    depozit = settings.get("depozit", 0)

    try:
        price, error = api.get_coin_price(coin_id)

        if price is None:
            send_message(chat_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É: {error}")
            return

        coin_name = DEFAULT_COINS.get(coin_id, {}).get("name", coin_id.upper())
        currency = DEFAULT_COINS.get(coin_id, {}).get("currency",
                                                      "rub").upper()

        info_parts = [
            f"<b>–ú–æ–Ω–µ—Ç–∞</b>: {coin_name}",
            f"<b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞</b>: {price:,.2f} {currency}",
            f"<b>–ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>: {threshold:,.2f} {currency}"
        ]

        if balance is not None:
            updated_balance = balance * price * 0.97
            formatted_balance = f"{updated_balance:,.2f}".replace(",", " ")
            info_parts.append(f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç</b>: {balance:,.2f}")
            info_parts.append(
                f"<b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å</b>: {formatted_balance} {currency}")

            if depozit > 0:
                profit = updated_balance - depozit
                profit_percent = (profit / depozit) * 100
                info_parts.append(f"<b>–í–ª–æ–∂–µ–Ω–æ</b>: {depozit:,.2f} {currency}")
                info_parts.append(
                    f"<b>–ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫</b>: {profit:,.2f} {currency} ({profit_percent:+.2f}%)"
                )
        else:
            info_parts.append("<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç</b>: –Ω–µ —É–∫–∞–∑–∞–Ω–æ")

        message = "\n".join(info_parts)
        send_message(chat_id, message, reply_markup=get_main_keyboard())

    except Exception as error:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {error}")
        send_message(
            chat_id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )


@bot.message_handler(func=lambda message: user_states.get(
    message.chat.id) == "awaiting_balance")
def set_balance(message: types.Message) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç."""
    chat_id = message.chat.id
    try:
        balance = float(message.text.replace(',', '.'))

        if balance <= 0:
            send_message(chat_id,
                         "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return

        user_settings[chat_id]["balance"] = balance
        db.update_user_settings(chat_id, balance=balance)

        send_message(
            chat_id,
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ: <b>{balance:,.2f}</b>",
            reply_markup=get_main_keyboard()
        )

        user_states.pop(chat_id, None)

    except ValueError:
        send_message(chat_id,
                     "–û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–Ω–µ—Ç:")


@bot.message_handler(func=lambda message: user_states.get(
    message.chat.id) == "awaiting_threshold")
def set_threshold(message: types.Message) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    chat_id = message.chat.id
    try:
        threshold = float(message.text.replace(',', '.'))

        if threshold <= 0:
            send_message(chat_id,
                         "–ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return

        user_settings[chat_id]["threshold"] = threshold
        db.update_user_settings(chat_id, threshold=threshold)

        send_message(
            chat_id,
            f"–ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω: <b>{threshold:,.2f}</b>",
            reply_markup=get_main_keyboard()
        )

        user_states.pop(chat_id, None)

    except ValueError:
        send_message(chat_id,
                     "–û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø–æ—Ä–æ–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")


@bot.message_handler(func=lambda message: user_states.get(
    message.chat.id) == "awaiting_depozit")
def set_depozit(message: types.Message) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—É–º–º—É –≤–ª–æ–∂–µ–Ω–∏—è."""
    chat_id = message.chat.id
    try:
        depozit = float(message.text.replace(',', '.'))

        if depozit < 0:
            send_message(chat_id,
                         "–°—É–º–º–∞ –≤–ª–æ–∂–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.")
            return

        user_settings[chat_id]["depozit"] = depozit
        db.update_user_settings(chat_id, depozit=depozit)

        send_message(
            chat_id,
            f"–°—É–º–º–∞ –≤–ª–æ–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: <b>{depozit:,.2f}</b>",
            reply_markup=get_main_keyboard()
        )

        user_states.pop(chat_id, None)

    except ValueError:
        send_message(chat_id,
                     "–û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—É–º–º—ã –≤–ª–æ–∂–µ–Ω–∏—è:")


admin.register_admin_handlers(bot, send_message)


@bot.message_handler(func=lambda message: True)
def echo_all(message: types.Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    chat_id = message.chat.id
    send_message(
        chat_id,
        "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /start –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.",
        reply_markup=get_main_keyboard()
    )
