import time

from telebot import TeleBot, types
from telebot.apihelper import ApiTelegramException
from requests.exceptions import RequestException

from crypto_bot import api
from crypto_bot import database as db
from crypto_bot import admin
from crypto_bot.config import (DEFAULT_COINS, DEFAULT_THRESHOLD,
                               LOGGER_ID,
                               RETRY_PERIOD, TELEGRAM_TOKEN, setup_logger)

logger = setup_logger(__name__)

bot = TeleBot(TELEGRAM_TOKEN)

user_settings = {}

user_states = {}


def load_settings():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç—å."""
    global user_settings
    user_settings = db.load_all_user_settings()
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {len(user_settings)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")


def set_menu_button():
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –≤ –ª–µ–≤–æ–π —á–∞—Å—Ç–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–æ—Ç–∞.
    """
    commands = [
        types.BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand(command="menu", description="–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    ]
    bot.set_my_commands(commands)


def get_main_menu_keyboard() -> types.InlineKeyboardMarkup:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.

    Returns:
        types.InlineKeyboardMarkup: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    keyboard = types.InlineKeyboardMarkup(row_width=2)

    btn_info = types.InlineKeyboardButton("–¢–µ–∫—É—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üìä", callback_data="current_info")
    btn_balance = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ –º–æ–Ω–µ—Ç ü™ô", callback_data="set_balance")
    keyboard.row(btn_info, btn_balance)

    btn_threshold = types.InlineKeyboardButton("–ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ‚öôÔ∏è", callback_data="set_threshold")
    btn_deposit = types.InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ üí∞", callback_data="set_deposit")
    keyboard.row(btn_threshold, btn_deposit)

    btn_price_alerts = types.InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ü–µ–Ω–µ üîî", callback_data="price_alerts")
    keyboard.row(btn_price_alerts)

    btn_help = types.InlineKeyboardButton("–ü–æ–º–æ—â—å ‚ùì", callback_data="help_info")
    keyboard.row(btn_help)

    return keyboard


def get_back_to_menu_keyboard() -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.
    """
    keyboard = types.InlineKeyboardMarkup()
    btn_back = types.InlineKeyboardButton("¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    keyboard.add(btn_back)
    return keyboard


def send_message(chat_id: int, message: str, reply_markup=None, parse_mode='HTML') -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, —É–¥–∞–ª—è–µ—Ç –µ–≥–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    Args:
        chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        reply_markup: –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        parse_mode: –†–µ–∂–∏–º —Ä–∞–∑–º–µ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é HTML)
    """
    try:
        bot.send_message(chat_id, message, reply_markup=reply_markup,
                         parse_mode=parse_mode)
    except ApiTelegramException as error:
        if error.error_code == 403 and "bot was blocked by the user" in error.description:
            logger.warning(
                f"–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {chat_id}. –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î.")
            db.remove_user(chat_id)

            if chat_id in user_settings:
                del user_settings[chat_id]
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {error}")
    except RequestException as error:
        logger.error(
            f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {error}")
    except Exception as error:
        logger.error(
            f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {error}")
    else:
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")


def price_checker() -> None:
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
    """
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω")

    while True:
        try:
            coin_ids = set()
            for chat_id, settings in user_settings.items():
                if "coin_id" in settings:
                    coin_ids.add(settings["coin_id"])

            if not coin_ids:
                logger.debug("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω")
                time.sleep(RETRY_PERIOD)
                continue

            prices = api.get_multiple_prices(list(coin_ids))

            for chat_id, settings in list(user_settings.items()):
                coin_id = settings.get("coin_id")
                if not coin_id or coin_id not in prices or prices[
                    coin_id] is None:
                    continue

                current_price = prices[coin_id]
                balance = settings.get("balance")
                threshold = settings.get("threshold", DEFAULT_THRESHOLD)
                depozit = settings.get("depozit", 0)
                last_notified_price = settings.get("last_notified_price")

                if balance is None or last_notified_price is None:
                    user_settings[chat_id][
                        "last_notified_price"] = current_price
                    db.update_user_settings(chat_id,
                                            last_notified_price=current_price)
                    continue

                if abs(current_price - last_notified_price) >= threshold:
                    updated_balance = balance * current_price * 0.97
                    formatted_balance = f"{updated_balance:,.2f}".replace(",",
                                                                          " ")

                    coin_name = DEFAULT_COINS.get(coin_id, {}).get("name",
                                                                   coin_id.upper())
                    currency = DEFAULT_COINS.get(coin_id, {}).get("currency",
                                                                  "rub").upper()

                    message_parts = [
                        f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å {coin_name}</b>: {current_price:,.2f} {currency}",
                        f"<b>–ë–∞–ª–∞–Ω—Å</b>: {formatted_balance} {currency}"
                    ]

                    if depozit > 0:
                        profit = updated_balance - depozit
                        profit_percent = (profit / depozit) * 100

                        message_parts.append(
                            f"<b>–í–ª–æ–∂–µ–Ω–æ</b>: {depozit:,.2f} {currency}")
                        message_parts.append(
                            f"<b>–ü—Ä–∏–±—ã–ª—å</b>: {profit:,.2f} {currency} ({profit_percent:+.2f}%)"
                        )

                    message = "\n".join(message_parts)
                    send_message(chat_id, message)

                    if chat_id in user_settings:
                        user_settings[chat_id][
                            "last_notified_price"] = current_price
                        db.update_user_settings(chat_id,
                                                last_notified_price=current_price)

            for coin_id, price in prices.items():
                if price is not None:
                    db.update_coin_price(coin_id, price)

        except api.RateLimitError:
            logger.warning(
                "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API. –û–∂–∏–¥–∞–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π.")
            time.sleep(RETRY_PERIOD * 2)
            continue

        except Exception as error:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω: {error}")
            if LOGGER_ID:
                try:
                    send_message(int(LOGGER_ID),
                                 f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω: {error}")
                except Exception:
                    pass

        time.sleep(RETRY_PERIOD)


@bot.message_handler(commands=["start", "menu"])
def send_welcome(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /menu.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º–µ–Ω—é.
    """
    chat_id = message.chat.id

    if chat_id not in user_settings:
        user_settings[chat_id] = {
            "coin_id": "fpi-bank",
            "balance": None,
            "threshold": DEFAULT_THRESHOLD,
            "depozit": 0,
            "last_notified_price": None
        }
        db.update_user_settings(chat_id)
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {chat_id}")

    welcome_text = (
        "<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crypto Tracker!</b>\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã FPI Bank.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç, –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è "
        "–æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à—É –ø—Ä–∏–±—ã–ª—å.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
    )

    keyboard = get_main_menu_keyboard()
    send_message(chat_id, welcome_text, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call: types.CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.
    """
    chat_id = call.message.chat.id

    bot.answer_callback_query(call.id)

    if call.data == "current_info":
        show_current_info(call.message)
    elif call.data == "set_balance":
        request_balance(call.message)
    elif call.data == "set_threshold":
        request_threshold(call.message)
    elif call.data == "set_deposit":
        request_depozit(call.message)
    elif call.data == "price_alerts":
        threshold = user_settings.get(chat_id, {}).get("threshold", DEFAULT_THRESHOLD)
        alerts_info = (
            "<b>üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ü–µ–Ω–µ</b>\n\n"
            "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ –≤–µ–ª–∏—á–∏–Ω—É, "
            "–±–æ–ª—å—à—É—é –∏–ª–∏ —Ä–∞–≤–Ω—É—é —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ—Ä–æ–≥—É.\n\n"
            f"–¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥: <b>{threshold}</b> —Ä—É–±.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è."
        )

        bot.edit_message_text(
            chat_id=chat_id,
            message_id=call.message.message_id,
            text=alerts_info,
            reply_markup=get_back_to_menu_keyboard(),
            parse_mode='HTML'
        )
    elif call.data == "help_info":
        help_text = (
            "<b>‚ùì –°–ø—Ä–∞–≤–∫–∞</b>\n\n"
            "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n"
            "1. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–µ—é—â–∏—Ö—Å—è —É –≤–∞—Å –º–æ–Ω–µ—Ç\n"
            "2. –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏\n"
            "3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
            "–ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞ –∏ —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å "
            "–∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ –≤–µ–ª–∏—á–∏–Ω—É, –ø—Ä–µ–≤—ã—à–∞—é—â—É—é —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ—Ä–æ–≥.\n\n"
            "–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @kotpilota"
        )

        bot.edit_message_text(
            chat_id=chat_id,
            message_id=call.message.message_id,
            text=help_text,
            reply_markup=get_back_to_menu_keyboard(),
            parse_mode='HTML'
        )
    elif call.data == "back_to_menu":
        back_to_menu(call)
    elif call.data == "open_menu":
        open_menu_from_button(call)


def request_balance(message: types.Message) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç."""
    chat_id = message.chat.id

    text = (
        "<b>ü™ô –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–Ω–µ—Ç</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç:"
    )

    if hasattr(message, 'message_id'):
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message.message_id,
            text=text,
            reply_markup=get_back_to_menu_keyboard(),
            parse_mode='HTML'
        )
    else:
        send_message(chat_id, text, reply_markup=get_back_to_menu_keyboard())

    user_states[chat_id] = "awaiting_balance"


def request_threshold(message: types.Message) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    chat_id = message.chat.id

    text = (
        "<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.1):"
    )

    if hasattr(message, 'message_id'):
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message.message_id,
            text=text,
            reply_markup=get_back_to_menu_keyboard(),
            parse_mode='HTML'
        )
    else:
        send_message(chat_id, text, reply_markup=get_back_to_menu_keyboard())

    user_states[chat_id] = "awaiting_threshold"


def request_depozit(message: types.Message) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É–º–º—É –≤–ª–æ–∂–µ–Ω–∏—è."""
    chat_id = message.chat.id

    text = (
        "<b>üí∞ –£–∫–∞–∑–∞–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–∏—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–ª–æ–∂–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö:"
    )

    if hasattr(message, 'message_id'):
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message.message_id,
            text=text,
            reply_markup=get_back_to_menu_keyboard(),
            parse_mode='HTML'
        )
    else:
        send_message(chat_id, text, reply_markup=get_back_to_menu_keyboard())

    user_states[chat_id] = "awaiting_depozit"


def show_current_info(message: types.Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    chat_id = message.chat.id
    settings = user_settings.get(chat_id)

    if not settings:
        text = "–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞."
        if hasattr(message, 'message_id'):
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message.message_id,
                text=text,
                reply_markup=get_back_to_menu_keyboard()
            )
        else:
            send_message(chat_id, text)
        return

    coin_id = settings.get("coin_id", "fpi-bank")
    balance = settings.get("balance")
    threshold = settings.get("threshold", DEFAULT_THRESHOLD)
    depozit = settings.get("depozit", 0)

    try:
        price, error = api.get_coin_price(coin_id)

        if price is None:
            text = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É: {error}"
            if hasattr(message, 'message_id'):
                bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message.message_id,
                    text=text,
                    reply_markup=get_back_to_menu_keyboard()
                )
            else:
                send_message(chat_id, text, reply_markup=get_back_to_menu_keyboard())
            return

        coin_name = DEFAULT_COINS.get(coin_id, {}).get("name", coin_id.upper())
        currency = DEFAULT_COINS.get(coin_id, {}).get("currency", "rub").upper()

        info_parts = [
            f"<b>üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {coin_name}</b>",
            f"<b>üíµ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞</b>: {price:,.2f} {currency}",
            f"<b>‚öôÔ∏è –ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>: {threshold:,.2f} {currency}"
        ]

        if balance is not None:
            updated_balance = balance * price * 0.97
            formatted_balance = f"{updated_balance:,.2f}".replace(",", " ")
            info_parts.append(f"<b>ü™ô –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç</b>: {balance:,.2f}")
            info_parts.append(
                f"<b>üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å</b>: {formatted_balance} {currency}")

            if depozit > 0:
                profit = updated_balance - depozit
                profit_percent = (profit / depozit) * 100
                info_parts.append(f"<b>üí∏ –í–ª–æ–∂–µ–Ω–æ</b>: {depozit:,.2f} {currency}")
                info_parts.append(
                    f"<b>üìà –ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫</b>: {profit:,.2f} {currency} ({profit_percent:+.2f}%)"
                )
        else:
            info_parts.append("<b>ü™ô –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç</b>: –Ω–µ —É–∫–∞–∑–∞–Ω–æ")

        message_text = "\n\n".join(info_parts)

        if hasattr(message, 'message_id'):
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message.message_id,
                text=message_text,
                reply_markup=get_back_to_menu_keyboard(),
                parse_mode='HTML'
            )
        else:
            send_message(
                chat_id,
                message_text,
                reply_markup=get_back_to_menu_keyboard()
            )

    except Exception as error:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {error}")

        error_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        if hasattr(message, 'message_id'):
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message.message_id,
                text=error_text,
                reply_markup=get_back_to_menu_keyboard()
            )
        else:
            send_message(
                chat_id,
                error_text,
                reply_markup=get_back_to_menu_keyboard()
            )


@bot.callback_query_handler(func=lambda call: call.data == "back_to_menu")
def back_to_menu(call: types.CallbackQuery) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    chat_id = call.message.chat.id

    user_states.pop(chat_id, None)

    bot.edit_message_text(
        chat_id=chat_id,
        message_id=call.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )


@bot.message_handler(func=lambda message: user_states.get(
    message.chat.id) == "awaiting_balance")
def set_balance(message: types.Message) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç."""
    chat_id = message.chat.id
    try:
        balance = float(message.text.replace(',', '.'))

        if balance <= 0:
            send_message(chat_id,
                         "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return

        user_settings[chat_id]["balance"] = balance
        db.update_user_settings(chat_id, balance=balance)

        success_text = (
            "<b>‚úÖ –£—Å–ø–µ—à–Ω–æ!</b>\n\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ: <b>{balance:,.2f}</b>"
        )

        send_message(chat_id, success_text)

        keyboard = get_main_menu_keyboard()
        send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

        user_states.pop(chat_id, None)

    except ValueError:
        send_message(chat_id,
                     "–û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–Ω–µ—Ç:")


@bot.message_handler(func=lambda message: user_states.get(
    message.chat.id) == "awaiting_threshold")
def set_threshold(message: types.Message) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    chat_id = message.chat.id
    try:
        threshold = float(message.text.replace(',', '.'))

        if threshold <= 0:
            send_message(chat_id,
                         "–ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return

        user_settings[chat_id]["threshold"] = threshold
        db.update_user_settings(chat_id, threshold=threshold)

        success_text = (
            "<b>‚úÖ –£—Å–ø–µ—à–Ω–æ!</b>\n\n"
            f"–ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω: <b>{threshold:,.2f}</b>"
        )

        send_message(chat_id, success_text)

        keyboard = get_main_menu_keyboard()
        send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

        user_states.pop(chat_id, None)

    except ValueError:
        send_message(chat_id,
                     "–û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø–æ—Ä–æ–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")


@bot.message_handler(func=lambda message: user_states.get(
    message.chat.id) == "awaiting_depozit")
def set_depozit(message: types.Message) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—É–º–º—É –≤–ª–æ–∂–µ–Ω–∏—è."""
    chat_id = message.chat.id
    try:
        depozit = float(message.text.replace(',', '.'))

        if depozit < 0:
            send_message(chat_id,
                         "–°—É–º–º–∞ –≤–ª–æ–∂–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.")
            return

        user_settings[chat_id]["depozit"] = depozit
        db.update_user_settings(chat_id, depozit=depozit)

        success_text = (
            "<b>‚úÖ –£—Å–ø–µ—à–Ω–æ!</b>\n\n"
            f"–°—É–º–º–∞ –≤–ª–æ–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: <b>{depozit:,.2f}</b>"
        )

        send_message(chat_id, success_text)

        keyboard = get_main_menu_keyboard()
        send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

        user_states.pop(chat_id, None)

    except ValueError:
        send_message(chat_id,
                     "–û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—É–º–º—ã –≤–ª–æ–∂–µ–Ω–∏—è:")


@bot.callback_query_handler(func=lambda call: call.data == "open_menu")
def open_menu_from_button(call: types.CallbackQuery) -> None:
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É."""
    chat_id = call.message.chat.id
    bot.answer_callback_query(call.id)

    keyboard = get_main_menu_keyboard()
    send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@bot.message_handler(func=lambda message: True)
def echo_all(message: types.Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    chat_id = message.chat.id

    if message.text.lower() == '/menu':
        send_welcome(message)
        return

    if chat_id in user_states:
        return

    send_message(
        chat_id,
        "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é –±–æ—Ç–∞."
    )
    menu_button = types.InlineKeyboardMarkup()
    btn_menu = types.InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", callback_data="open_menu")
    menu_button.add(btn_menu)
    send_message(chat_id, "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=menu_button)


admin.register_admin_handlers(bot, send_message)
